#Exceptions

- Exception is an object which contains information about the error
- There are main exception objects in java
- stack trace shows the details

#Exception Handler

- block of code to handle exception

#Types of Exceptions

1. Checked Exceptions - checked at compile time
2. Unchecked exceptions / runtime exception - programming errors

eg
- Null pointer exception
- Arithmentic exception
- IllegalArgumentException
- IndexOutOfBoundsException
- IllegalStateException

3. Error

- StackOverflow error
- JVM issue

#Exception Hierarchy

1. Throwable
   - defines common characteristics for errors and exceptions\
   
2. Exception extends throwable

	- parent for all checked and unchecked exceptions
	
	RunTimeException extends Exception
	
	-	for run time errors. it is derived from Exception
	
3. Error

	- for error outside the application
	
#Caching Exceptions

- Each class blocks catches specific exceptions

#finally

- always gets executed

#try with resources - Private Resources

- try statement having one or more resources
- no need to close the resource in finally block
- classes implement AutoCloseable Interface

#Throwing Exceptions

- it is called defensive programming. to prevent further damage by the input
- good to use when building a framework or library

#Rethrow Exception

- we can rethrow the exception to the caller to handle and log to file or DB

#Custom Exception

- Create a new exception class and extend
// checked - > Exception
//unchecked - >RunTIme Exception

#Chaining Exception

- wrapping an specific exception inside a generic exception
- used in building libraries or large application
- need to use cause keyword

	
#Generics

- for type safety in a collection
class GenericList<T>
T stands for type
- Generics does not allow primitive types. We need to use wrapper classes for that

#Boxing
-converting primitive type to reference type
eg : List<String> numbers
numbers.add(1) //boxing
#UnBoxing
- converting a reference back to primitive type 
eg : int number = numbers.get(0);

#Constraints

class GenericList<T implements Comparable>

-only pass classes which implement comparable

Comparable
Cloneable
public class GenericList<T extends Comparable & Cloneable>
- the T parameter is now bounded/restricted

#Type Erasure

- Java compiler replaces type field T with Object class in run time
- If we have a contraint like Number, java compiler will replace T with Number
- Java compiler erases T with the contraints or Object


#Comparable Interface

- a generic class with a compareTo method
- used for sorting java collections

#Generic methods

- We can also define methods as generic instead of the whole class
eg: public static <T extends Comparable<T>> T  max(T first,T second) 

#Multiple Type Parameters

- to specify mutliple parameters 
eg: 
public class KeyValuePair<K,V>

public static <K,V> void print(K key,V value)

#Generics Inheritance

-------------------------------------------------------------
#Collections

#Iterable Interface

- part of java.lang package
- top most level of collections
- used to iterate the collections
- foreach loop uses iterator object implicitly

#Iterator Interface

- part of java.util package


#Collection Interface

- container for other objects
- a generic interface
- extends iterable
- add,remove, get operations
- cannot access collection by index

Collection<String> collection = new ArrayList<>();

#List Interface

- to order collection
- supports indexing
- extends Collection interface
- ArrayList
- LinkedList
- Vector
- Stack


#Comparable Interface

- to sort the objects with natural ordering
- A comparable object is capable of comparing itself with another object

#Comparator interface

- to compare data based on specific field


#Queue Inteface

- extends Collection interface

- to process jobs in order

- important implementations are ArrayDeque and PriorityQueue

#Set Interface

- a collection containing no duplicates
- no order is guaranteed
- atmost 1 null value
- HashSet
- LinkedHashSet (extends hashset and implements set). maintains natural order
- TreeSet (stores in ascending order. maintains uniqueness)

#Hashtable

- a special data structure with O(1)
- called as Maps in Java

#Map Interface

- not an iterable object and hence cannot use foreach loop
- has many implementations but most widely used one is hashmap
- it maps a key to value. hence it is called as maps
- order is not guaranteed in maps
- HashMap (no order and unique keys). can have one null key
- Linked HashMap (maintains insertion order). can have one null key
- Treemap maintains ascending order of the elements and cannot contain null key
- ConcurrentHashMap, SynchronizedhashMap

#Lambdas--------------------------------------------------------------

- functional programming

#Functional Interface

- Interfaces with just single abstract method
- It could have some implementations
- @FunctionalInterface : to declare an interface as FunctionalInterface

#Anonymous Inner Classes

- if we just wanted to use the interface once
- no name and it just has an implementation

#Lambda

- a simple way of implementing an anonynous functions
- to represent a functional interface
- It only works with a functional interface
- we can also store lambda expression in a variable
- Lambda expressions are actually an object but we use them to represent anonymous functions

#variables

- Lambda has no variables ie. state
- Lambda can access instance variables and methods including static
- this refers to the current class in which lambda exists
- to call a static method from lambda
#static method
greet(LambdasDemos::print)

#instance method
var demo = new LambdasDemos();
greet(demo::print);

#Constructor
greet(LambdasDemos::new);

#Types of Functional Interfaces - java.util.function

- Consumer

	void consume(obj) - takes input but no return type
	
- Supplier

	obj supply()	- returns an Object without input
	
- Function

	obj map(obj)	- Takes an input and returns a value

- Predicate		

	bool test(condition)	-  an operation that takes an object to see if object matches the criteria
	
	
#1. Consumer Interface

- takes single argument and does not return a value
	

#Imperative programming

#Declarative programming

#2. Supplier Interface

- supplies a value

#3. Function Interface

- takes an argument and returns a value
- it also has compose function to process in reverse order

#4. Predicate Interface

- to check something based on the parameter which is boolean
- used to filter data
- has and or negate operators

#Binary Operator

#Unary Operator


#Programming Paradigms-----------------------------------------------------

#Declarative (what needs to be done)

eg: sql
streams

#Functional

#Object-oriented

#Event-driven


#Stream--------------------------------------------------------------------------

- is a sequence of objects but does not store data
- it is a way to get data out of collections
eg: collection is a water tank and streams is a pipe to get water out of it
- process a collection of objects in a functional wayw2

#Imperative (how it needs to be done)

- using conditional statements 


#Create Stream

- From Collections
- From arrays
- From an arbitrary number of objects
- Infinite/Finite Streams

#StreamMethods

stream
limit
foreach

#Intermediate

- we can continue filter chaining
- it does not consume the stream
- map()
- filter() 

#Terminal

- the methods which starts consuming the stream

foreach


#Mapping

- to transform the value

#map()
- eg: to extract specific String fields from a list
 
#flatMap()

- eg: to flatten a Stream(List<Objects>) to Stream(Objects)


#Slicing Stream

- limit(n)
- skip(n)
- takeWhile(predicate)
- dropWhile(predicate)

#Sorting Streams

- to sort the collections

#Distinct

- using distinct function

#Peek

- to inspect intermediatory results
- used for troubleshooting problems

#Reducers

- all are terminal operations

- count
- anyMatch
- allMatch

etc


#Collectors

- to collect the result of a stream into a data structure
Collectors.toList())
Collectors.toMap()

Collectors.summingInt()
Collectors.summarizingInt()

#Grouping Elements

#Partioning Elements

#Primitive type streams

- intStream
- doubleStream
- longStream


