
#JPQL / #HQL

- queries the entities and not the table


#Criteria Queries

#Native SQL Queries

#declarative transaction management
- handling txn management through configuration


#Transactional

- the queries will be fired only at the end of all the operations except when we use em.flush()

- it is done by using the Persistence Conext

- persistence context is created at the start of the transaction and killed at the end of the transaction

- in Hibernate, session = persistence context

- can be done at class level or method level
 
- If we use EntityManager in a unit test, then we need to make the test @Transactional
 
#Relationships

#OneToOneMapping

- One to one mapping between Student and Passport entities

- Student is the owning side and Passport is the non-owning side

- Relationship to be defined in the non owning side

@OneToOne
- to be used in Student Entity as it owns the passport_id

@OneToOne(mappedBy = "passport")
- to be used in Passport Entity as it is the non owning side

- Passport_id column is created in the owning entity table i.e Student table

- Passport table does not have student_id

- it is eager loading

#ManyToOneMapping

- one course with many reviews

- Review table stores course_id and not vice versa

- Review is the owning side of the relationship

@OneToMany(mappedBy = "course")
- to be used in Course Entity as it is the non-owning side
- Lazy loading

@ManyToOne
- to be used in Review Entity as it owns the course_id column
- Eager loading by default

#ManyToManyMapping

- One Student can be associated with many courses

- One Course can be associated with many Students

- Need to have a join table for many to many relationship. It is automatically created

- Course_Student table contains the ids of student_id and course_id

- Make any one Entity to be the owning side of the relationship

@ManyToMany(mappedBy="courses")
- to be used in Course Entity as it is non-owning side

@ManyToMany()
- to be used in Student side as it is the owning table

- Lazy fetch by default

#Inheritance Mapping and Hierarchies

1.SINGLE_TABLE

#superclass
@Entity
@Inhertiance(strategy=InheritanceType.SINGLE_TABLE)
abstract class Employee

#subclass
public class PartTimeEmployee

public class FullTimeEmployee

- only 1 table called Employee is created with the records from both subclasses PartTimeEmployee and FullTimeEmployee
- drawback is some of the columns are NULL and hence problem with data integrity
- a DType(Discriminatory Type) column is created to differentiate between PartTimeEmployee and FullTimeEmployee records
- good for performance

2. TABLE_PER_CLASS

#superclass
@Entity
@Inhertiance(strategy=InheritanceType.TABLE_PER_CLASS)
abstract class Employee

#subclass
public class PartTimeEmployee

public class FullTimeEmployee

- Each concrete sub class is provided with individual table
- Union of both the table is used to retrieve data
- Drawback is common columns are repeated in both the tables
- It does not satisfy 3NF and hence should not be used

3. JOINED

#superclass
@Entity
@Inhertiance(strategy=InheritanceType.JOINED)
abstract class Employee

#subclass
public class PartTimeEmployee

public class FullTimeEmployee

- all the class will have their own tables 
- Employee, PartTimeEmployee and FullTimeEmployee 3 tables
- 3 tables are joined to retrieve the values
- no duplication of columns and a good DB design. Good for data integrity and data quality
- but performance wise it is slow if it has many tables


4. MappedSuperClass

#superclass
@MappedSuperClass
//@Entity
//@Inheritance
abstract class Employee

- Employee is not an Entity

#subclass
public class PartTimeEmployee

public class FullTimeEmployee


- no relationship
- used only for defining common fields between the Entities
- 2 tables created for the Entities


#Recommended Inheritance Types

- Use SINGLE_TABLE strategy if you need performance
- Use JOINED if you need to have data integrity


#Transaction Management

#ACID
 - Atomicity (all success or all fail)
 - Consistency (leaving the system in a consistent state irrespective of success or failure)
 - Isolation (how changes in one transaction are visible to others)
 - Durability (once a transaction is successful, the data should be persisted even if the system is failed)
 

#Reads


1. Dirty Reads
 
- 2nd trasaction reads the data from first transaction even before it is completed

2. Non-Repeatable Reads

- reading same value twice but getting different values instead of the same expected value

3. Phantom Read

- at different times, we get different number of rows for the same records

#Isolation Levels


1. Read uncommitted

- allow any transaction to read any data. no txn lock and dirty read is possible

2. Read Committed

- only allow to read data from committed transactions
- most widely used

- no dirty read

3. Repeatable Read

- the row read during a transaction will be locked and other transaction cannot update it
- hence Non-repeatble read issue is solved

4. Serializable

- all 3 read issues are solved
- Table lock is placed on the constraint. eg : age between 5 and 55
- No other transactions can read,update or delete the data until the transaction is completed
- performance very poor


@Transactional - JPA

- only for a single database

@Transactional - Spring

- for multiple database and external systems like MQ
- consistent data across applications
- we can decide the isolation levels and set it as below

@Transactional(isolation=)


#Spring Data Rest

- directly allow web services to use repository methods
- not recommended for production but can be used for POC for quicker data retrieval
- use the annotation @RepositoryRestResource
 

#Caching


- save network costs in hitting DB everytime
- Cache resides in data layer

#FirstLevelCache
- enabled automatically by Hibernate
- multiple transactions running in parallel
- every transaction has its own persistence context
- 1st time hibernate retrives from DB
- Next time it takes from first level cache within the boundary of single transaction
- Make the boundary of the transaction bigger to make first level cache efficient
- So start the boundary of a transaction from the service/business layer

#SecondLevelCache
- Across multiple transactions
- stores common information for all users in the applications
 1. enable second level cache 
	#spring.jpa.properties.hibernate.cache.use_second_level_cache = true
 2. specify the cahcing framework to used
	#spring.jpa.properties.hibernate.cache.region.factory_class = org.hibernate.cache.ehcache.EhcacheRegionFactory
 3. only Cache what we want 
	#spring.jpa.properties.javax.persistence.SharedCacheMode = ENABLE_SELECTIVE
 4. What data to Cache
	#logging.level.net.sf.ehcache=debug
	- add an annotation @Cacheable to the methods
	- when data is in cahce, it is called a L2C Hit 
	- when data is not in cahce, it is called a L2C Miss 
	
	
#Embedded Objects
- embed one object inside an Entity 
@Embeddable
@Embedded	


#Performance Tuning

Monitoring

- Enabled and monitor stats in atleast one environment
- enable in application.properties
- meaure and tune

Indexes

- identiy right index

Appropriate Caching

- First level
- Second level
- Distributed Caching (across the applications in parallel)

#Eager vs Lazy Fetch

- all ToOne mappings are Eager by default
- Use lazy fetch mostly

#N+1 problem

- use in-memory database like H2 for unit tests with test data in data.sql file
- use real DB for the application

	 