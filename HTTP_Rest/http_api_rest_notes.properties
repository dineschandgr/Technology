#HTTP

- HyperText Transport Protocol
- port 80
- It resides in Application Layer
- Client sends a request to DNS server to find the ip of the domain and reaches the server
- Then client request for a copy of the web page by http request 
- Server responds the copy of the web pages with http response
- The data is transferred over TCP/IP protocol packets in the Transport Layer
- The browser renders the web page with multiple packets received
- The connection is disconnected and hence it is a stateless protocol
- The whole session is called a HTTP Transaction
- Next time client again has to initiate a request as the server does not know about the client
- We can make it stateful by storing session info about the client on the server side
- Every data we send is public and no security

#HTTP/2

- adds new features (compression, multiplexing, prioritization) in order to reduce latency and increase performance and security.

#HTTPS

- Secure HTTP
- HTTP + TLS = HTTPS
- port 443
- AN SSL certificate is installed on the server
- Works using SSL (Secure Sockets Layer) protocol. #Depreceated now
- Latest protocol standard is TLS (Transport Layer Security)
- Both SSL and TLS works on top of TCP in transport layer without changing the above layers
- Even though hacker can see the host name and the port, the data is encrypted and hence secure
- The client request browser for the SSL/TLS certificate
- The server sends a copy od the SSL certificate with ciphersuites to the client and the client trusts the server
- Client can choose any ciphersuite algorithm
- Then client initiates a handshake with server and server agrees and opens a secure connection
- Now client sends encrypted data and server responds
- All the data is encrypted
- Public key is used for encryption and secret private key is used for decryption. Private key resides in server side
- A certificate is a public key with a label identifying the owner
- The certificate randomly generates the public/private key pairs



#API

- a way to communicate with a software component
- any methods
- eg: using a command line to call shutdown in the system

- Web service is an API in the web
- Not API is a REST web service

#Rest API

- Representation State Transfer

- API that follows the rules of REST specification

- A web service is defined by the rules

- REST web service has its own rules. eg use GET to retrieve, POST to submit data etc
- The specification dictates how distributed systems on the web should communicate
- REST is a way to implement HTTP
- REST is the underlying architecture of the web


#Method Information
#Scoping Information


#Rest Rules

1. Method Information
	- relevant methods must be used
2. Scoping Information
	- Scoping information should go in the URI
	eg: api/users/:userid
	
- uses HTTP methods suitably
- Scoping info goes in the parameters part of the data	
- Stateless
- Uses common data formats like JSON

- HATEOAS

#Web Services

- WSDL (Web Services Definition Language)
- SOAP (XML,HTTP) is a protocol
- REST is an architecture
- needed for systems to talk to each other
 
   
- When we click every url, the application/resource state is transferred
